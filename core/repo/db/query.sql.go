// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO Subjects (Name)
VALUES ($1)
RETURNING subjectid, name
`

func (q *Queries) CreateSubject(ctx context.Context, name string) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, name)
	var i Subject
	err := row.Scan(&i.Subjectid, &i.Name)
	return i, err
}

const deleteAcademicCalendarEntry = `-- name: DeleteAcademicCalendarEntry :exec
DELETE FROM AcademicCalendar
WHERE CalendarID = $1
`

func (q *Queries) DeleteAcademicCalendarEntry(ctx context.Context, calendarid int32) error {
	_, err := q.db.Exec(ctx, deleteAcademicCalendarEntry, calendarid)
	return err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM Subjects
WHERE SubjectID = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, subjectid int32) error {
	_, err := q.db.Exec(ctx, deleteSubject, subjectid)
	return err
}

const getAcademicCalendarForSemester = `-- name: GetAcademicCalendarForSemester :many
SELECT calendarid, semesterid, daynumber, subjectid, curriculumid, examid, holidayid, description FROM AcademicCalendar
WHERE SemesterID = $1
ORDER BY DayNumber ASC
`

func (q *Queries) GetAcademicCalendarForSemester(ctx context.Context, semesterid int32) ([]Academiccalendar, error) {
	rows, err := q.db.Query(ctx, getAcademicCalendarForSemester, semesterid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Academiccalendar
	for rows.Next() {
		var i Academiccalendar
		if err := rows.Scan(
			&i.Calendarid,
			&i.Semesterid,
			&i.Daynumber,
			&i.Subjectid,
			&i.Curriculumid,
			&i.Examid,
			&i.Holidayid,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubject = `-- name: GetSubject :one
SELECT subjectid, name FROM Subjects
WHERE SubjectID = $1
LIMIT 1
`

func (q *Queries) GetSubject(ctx context.Context, subjectid int32) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubject, subjectid)
	var i Subject
	err := row.Scan(&i.Subjectid, &i.Name)
	return i, err
}

const insertAcademicCalendarEntry = `-- name: InsertAcademicCalendarEntry :exec
INSERT INTO AcademicCalendar (SemesterID, DayNumber, SubjectID, CurriculumID, ExamID, HolidayID, Description)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertAcademicCalendarEntryParams struct {
	Semesterid   int32
	Daynumber    int32
	Subjectid    pgtype.Int4
	Curriculumid pgtype.Int4
	Examid       pgtype.Int4
	Holidayid    pgtype.Int4
	Description  pgtype.Text
}

func (q *Queries) InsertAcademicCalendarEntry(ctx context.Context, arg InsertAcademicCalendarEntryParams) error {
	_, err := q.db.Exec(ctx, insertAcademicCalendarEntry,
		arg.Semesterid,
		arg.Daynumber,
		arg.Subjectid,
		arg.Curriculumid,
		arg.Examid,
		arg.Holidayid,
		arg.Description,
	)
	return err
}

const listSubjects = `-- name: ListSubjects :many
SELECT subjectid, name FROM Subjects
ORDER BY Name
`

func (q *Queries) ListSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.Query(ctx, listSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(&i.Subjectid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAcademicCalendarEntry = `-- name: UpdateAcademicCalendarEntry :exec
UPDATE AcademicCalendar
SET DayNumber = $2, SubjectID = $3, CurriculumID = $4, ExamID = $5, HolidayID = $6, Description = $7
WHERE CalendarID = $1
`

type UpdateAcademicCalendarEntryParams struct {
	Calendarid   int32
	Daynumber    int32
	Subjectid    pgtype.Int4
	Curriculumid pgtype.Int4
	Examid       pgtype.Int4
	Holidayid    pgtype.Int4
	Description  pgtype.Text
}

func (q *Queries) UpdateAcademicCalendarEntry(ctx context.Context, arg UpdateAcademicCalendarEntryParams) error {
	_, err := q.db.Exec(ctx, updateAcademicCalendarEntry,
		arg.Calendarid,
		arg.Daynumber,
		arg.Subjectid,
		arg.Curriculumid,
		arg.Examid,
		arg.Holidayid,
		arg.Description,
	)
	return err
}

const updateSubject = `-- name: UpdateSubject :exec
UPDATE Subjects
SET Name = $2
WHERE SubjectID = $1
`

type UpdateSubjectParams struct {
	Subjectid int32
	Name      string
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) error {
	_, err := q.db.Exec(ctx, updateSubject, arg.Subjectid, arg.Name)
	return err
}
